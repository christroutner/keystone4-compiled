{
  "_args": [
    [
      {
        "raw": "letsencrypt@^2.1.0",
        "scope": null,
        "escapedName": "letsencrypt",
        "name": "letsencrypt",
        "rawSpec": "^2.1.0",
        "spec": ">=2.1.0 <3.0.0",
        "type": "range"
      },
      "/home/connextcms/test/node_modules/letsencrypt-express"
    ]
  ],
  "_from": "letsencrypt@>=2.1.0 <3.0.0",
  "_id": "letsencrypt@2.1.8",
  "_inCache": true,
  "_location": "/letsencrypt",
  "_nodeVersion": "5.12.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/letsencrypt-2.1.8.tgz_1476197577594_0.13280125940218568"
  },
  "_npmUser": {
    "name": "insightfuls",
    "email": "insightful_schmidt@yahoo.com.au"
  },
  "_npmVersion": "2.15.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "letsencrypt@^2.1.0",
    "scope": null,
    "escapedName": "letsencrypt",
    "name": "letsencrypt",
    "rawSpec": "^2.1.0",
    "spec": ">=2.1.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/letsencrypt-express"
  ],
  "_resolved": "https://registry.npmjs.org/letsencrypt/-/letsencrypt-2.1.8.tgz",
  "_shasum": "981ae1415b9fb372ae15f1156d5d32b7dcc78bdd",
  "_shrinkwrap": null,
  "_spec": "letsencrypt@^2.1.0",
  "_where": "/home/connextcms/test/node_modules/letsencrypt-express",
  "author": {
    "name": "AJ ONeal",
    "email": "coolaj86@gmail.com",
    "url": "https://coolaj86.com/"
  },
  "bugs": {
    "url": "https://github.com/Daplie/node-letsencrypt/issues"
  },
  "dependencies": {
    "asn1js": "^1.2.12",
    "bluebird": "^3.0.6",
    "certpem": "^1.0.0",
    "homedir": "^0.6.0",
    "le-acme-core": "^2.0.5",
    "le-challenge-fs": "^2.0.2",
    "le-challenge-sni": "^2.0.0",
    "le-sni-auto": "^2.1.0",
    "le-store-certbot": "^2.0.3",
    "localhost.daplie.com-certificates": "^1.2.3",
    "node.extend": "^1.1.5",
    "pkijs": "^1.3.27",
    "rsa-compat": "^1.2.1"
  },
  "deprecated": "letsencrypt has been renamed to greenlock. Please find it at npm greenlock",
  "description": "Let's Encrypt for node.js on npm",
  "devDependencies": {
    "request": "^2.75.0"
  },
  "directories": {},
  "dist": {
    "shasum": "981ae1415b9fb372ae15f1156d5d32b7dcc78bdd",
    "tarball": "https://registry.npmjs.org/letsencrypt/-/letsencrypt-2.1.8.tgz"
  },
  "gitHead": "acf8a487de507ca46bf7bca6fbde390afbd500fc",
  "homepage": "https://github.com/Daplie/node-letsencrypt#readme",
  "keywords": [
    "letsencrypt",
    "letsencrypt.org",
    "le",
    "Let's Encrypt",
    "lejs",
    "le.js",
    "acme",
    "node",
    "nodejs",
    "node.js",
    "client"
  ],
  "license": "(MIT OR Apache-2.0)",
  "main": "index.js",
  "maintainers": [
    {
      "name": "coolaj86",
      "email": "coolaj86@gmail.com"
    },
    {
      "name": "insightfuls",
      "email": "insightful_schmidt@yahoo.com.au"
    },
    {
      "name": "michielbdejong",
      "email": "michiel@unhosted.org"
    }
  ],
  "name": "letsencrypt",
  "optionalDependencies": {},
  "readme": "[![Join the chat at https://gitter.im/Daplie/letsencrypt-express](https://badges.gitter.im/Daplie/letsencrypt-express.svg)](https://gitter.im/Daplie/letsencrypt-express?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n| **letsencrypt**\n| [letsencrypt-cli](https://github.com/Daplie/letsencrypt-cli)\n| [letsencrypt-express](https://github.com/Daplie/letsencrypt-express)\n| [letsencrypt-cluster](https://github.com/Daplie/letsencrypt-cluster)\n| [letsencrypt-koa](https://github.com/Daplie/letsencrypt-koa)\n| [letsencrypt-hapi](https://github.com/Daplie/letsencrypt-hapi)\n|\n\nletsencrypt\n===========\n\nAutomatic [Let's Encrypt](https://letsencrypt.org) HTTPS / TLS / SSL Certificates for node.js\n\nFree SSL with [90-day](https://letsencrypt.org/2015/11/09/why-90-days.html) HTTPS / TLS Certificates\n\nAre these the droids you're looking for?\n------\n\nThis is a **low-level library** for implementing ACME / LetsEncrypt Clients, CLIs,\nsystem tools, and abstracting storage backends (file vs db, etc).\n\nFor `express`, raw `https` or `spdy`, or `restify` (same as raw https) see\n[**letsencrypt-express**](https://github.com/Daplie/letsencrypt-express) and [letsencrypt-cluster](https://github.com/Daplie/letsencrypt-cluster).\n\nFor `hapi` see [letsencrypt-hapi](https://github.com/Daplie/letsencrypt-hapi).\n\nFor `koa` or `rill`\nsee [letsencrypt-koa](https://github.com/Daplie/letsencrypt-koa).\n\nFor `bash`, `fish`, `zsh`, `cmd.exe`, `PowerShell`\nsee [**letsencrypt-cli**](https://github.com/Daplie/letsencrypt-cli).\n\nInstall\n=======\n\n`letsencrypt` requires at least two plugins:\none for managing certificate storage and the other for handling ACME challenges.\n\nThe default storage plugin is [`le-store-certbot`](https://github.com/Daplie/le-store-certbot)\nand the default challenge is [`le-challenge-fs`](https://github.com/Daplie/le-challenge-fs).\n\n```bash\nnpm install --save letsencrypt@2.x\n\nnpm install --save le-store-certbot@2.x   # default plugin for accounts, certificates, and keypairs\nnpm install --save le-challenge-fs@2.x    # default plugin for challenge handlers\nnpm install --save le-acme-core@2.x       # default plugin for ACME spec\nnpm install --save le-sni-auto@2.x        # default plugin for SNICallback\n```\n\n**Important**: Use node v4.5+ or v6.x, node <= v4.4 has a [known bug](https://github.com/nodejs/node/issues/8053) in the `Buffer` implementation.\n\nUsage\n=====\n\nIt's very simple and easy to use, but also very complete and easy to extend and customize.\n\n### Overly Simplified Example\n\nAgainst my better judgement I'm providing a terribly oversimplified example\nof how to use this library:\n\n```javascript\nvar le = require('letsencrypt').create({ server: 'staging' });\n\nvar opts = {\n  domains: ['example.com'], email: 'user@email.com', agreeTos: true\n};\n\nle.register(opts).then(function (certs) {\n  console.log(certs);\n  // privkey, cert, chain, expiresAt, issuedAt, subject, altnames\n}, function (err) {\n  console.error(err);\n});\n```\n\nYou also need some sort of server to handle the acme challenge:\n\n```javascript\nvar app = express();\napp.use('/', le.middleware());\n```\n\nNote: The `webrootPath` string is a template.\nAny occurance of `:hostname` will be replaced\nwith the domain for which we are requested certificates.\n\n### Useful Example\n\nThe configuration consists of 3 components:\n\n* Storage Backend (search npm for projects starting with 'le-store-')\n* ACME Challenge Handlers (search npm for projects starting with 'le-challenge-')\n* Letsencryt Config (this is all you)\n\n```javascript\n'use strict';\n\nvar LE = require('letsencrypt');\nvar le;\n\n\n// Storage Backend\nvar leStore = require('le-store-certbot').create({\n  configDir: '~/letsencrypt/etc'                          // or /etc/letsencrypt or wherever\n, debug: false\n});\n\n\n// ACME Challenge Handlers\nvar leChallenge = require('le-challenge-fs').create({\n  webrootPath: '~/letsencrypt/var/'                       // or template string such as\n, debug: false                                            // '/srv/www/:hostname/.well-known/acme-challenge'\n});\n\n\nfunction leAgree(opts, agreeCb) {\n  // opts = { email, domains, tosUrl }\n  agreeCb(null, opts.tosUrl);\n}\n\nle = LE.create({\n  server: LE.stagingServerUrl                             // or LE.productionServerUrl\n, store: leStore                                          // handles saving of config, accounts, and certificates\n, challenges: { 'http-01': leChallenge }                  // handles /.well-known/acme-challege keys and tokens\n, challengeType: 'http-01'                                // default to this challenge type\n, agreeToTerms: leAgree                                   // hook to allow user to view and accept LE TOS\n//, sni: require('le-sni-auto').create({})                // handles sni callback\n, debug: false\n//, log: function (debug) {console.log.apply(console, args);} // handles debug outputs\n});\n\n\n// If using express you should use the middleware\n// app.use('/', le.middleware());\n//\n// Otherwise you should see the test file for usage of this:\n// le.challenges['http-01'].get(opts.domain, key, val, done)\n\n\n\n// Check in-memory cache of certificates for the named domain\nle.check({ domains: [ 'example.com' ] }).then(function (results) {\n  if (results) {\n    // we already have certificates\n    return;\n  }\n\n\n  // Register Certificate manually\n  le.register({\n\n    domains: ['example.com']                                // CHANGE TO YOUR DOMAIN (list for SANS)\n  , email: 'user@email.com'                                 // CHANGE TO YOUR EMAIL\n  , agreeTos: ''                                            // set to tosUrl string (or true) to pre-approve (and skip agreeToTerms)\n  , rsaKeySize: 2048                                        // 2048 or higher\n  , challengeType: 'http-01'                                // http-01, tls-sni-01, or dns-01\n\n  }).then(function (results) {\n\n    console.log('success');\n\n  }, function (err) {\n\n    // Note: you must either use le.middleware() with express,\n    // manually use le.challenges['http-01'].get(opts, domain, key, val, done)\n    // or have a webserver running and responding\n    // to /.well-known/acme-challenge at `webrootPath`\n    console.error('[Error]: node-letsencrypt/examples/standalone');\n    console.error(err.stack);\n\n  });\n\n});\n```\n\nHere's what `results` looks like:\n\n```javascript\n{ privkey: ''     // PEM encoded private key\n, cert: ''        // PEM encoded cert\n, chain: ''       // PEM encoded intermediate cert\n, issuedAt: 0     // notBefore date (in ms) parsed from cert\n, expiresAt: 0    // notAfter date (in ms) parsed from cert\n, subject: ''     // example.com\n, altnames: []    // example.com,www.example.com\n}\n```\n\nAPI\n---\n\nThe full end-user API is exposed in the example above and includes all relevant options.\n\n```\nle.register(opts)\nle.check(opts)\n```\n\n### Helper Functions\n\nWe do expose a few helper functions:\n\n* LE.validDomain(hostname) // returns '' or the hostname string if it's a valid ascii or punycode domain name\n\nTODO fetch domain tld list\n\n### Template Strings\n\nThe following variables will be tempalted in any strings passed to the options object:\n\n* `~/` replaced with `os.homedir()` i.e. `/Users/aj`\n* `:hostname` replaced with the first domain in the list i.e. `example.com`\n\nDeveloper API\n-------------\n\nIf you are developing an `le-store-*` or `le-challenge-*` plugin you need to be aware of\nadditional internal API expectations.\n\n**IMPORTANT**:\n\nUse `v2.0.0` as your initial version - NOT v0.1.0 and NOT v1.0.0 and NOT v3.0.0.\nThis is to indicate that your module is compatible with v2.x of node-letsencrypt.\n\nSince the public API for your module is defined by node-letsencrypt the major version\nshould be kept in sync.\n\n### store implementation\n\nSee <https://github.com/Daplie/le-store-SPEC>\n\n* getOptions()\n* accounts.\n  * checkKeypair(opts, cb)\n  * check(opts, cb)\n  * setKeypair(opts, keypair, cb)\n  * set(opts, reg, cb)\n* certificates.\n  * checkKeypair(opts, cb)\n  * check(opts, cb)\n  * setKeypair(opts, keypair, cb)\n  * set(opts, reg, cb)\n\n### challenge implementation\n\nSee https://github.com/Daplie/le-challenge-fs\n\n* `.set(opts, domain, key, value, cb);`         // opts will be saved with domain/key\n* `.get(opts, domain, key, cb);`                // opts will be retrieved by domain/key\n* `.remove(opts, domain, key, cb);`             // opts will be retrieved by domain/key\n\nChange History\n==============\n\n* v2.0.2 - Aug 9th 2016 update readme\n* v2.0.1 - Aug 9th 2016\n  * major refactor\n  * simplified API\n  * modular plugins\n  * knock out bugs\n* v1.5.0 now using letiny-core v2.0.0 and rsa-compat\n* v1.4.x I can't remember... but it's better!\n* v1.1.0 Added letiny-core, removed node-letsencrypt-python\n* v1.0.2 Works with node-letsencrypt-python\n* v1.0.0 Thar be dragons\n\nLICENSE\n=======\n\nDual-licensed MIT and Apache-2.0\n\nSee LICENSE\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Daplie/node-letsencrypt.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "2.1.8"
}

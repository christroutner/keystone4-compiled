{
  "_args": [
    [
      {
        "raw": "range_check@1.4.0",
        "scope": null,
        "escapedName": "range_check",
        "name": "range_check",
        "rawSpec": "1.4.0",
        "spec": "1.4.0",
        "type": "version"
      },
      "/home/connextcms/test/node_modules/keystone"
    ]
  ],
  "_from": "range_check@1.4.0",
  "_id": "range_check@1.4.0",
  "_inCache": true,
  "_location": "/range_check",
  "_nodeVersion": "4.4.5",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/range_check-1.4.0.tgz_1469278119866_0.1247682215180248"
  },
  "_npmUser": {
    "name": "keverw",
    "email": "keverw92@gmail.com"
  },
  "_npmVersion": "2.15.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "range_check@1.4.0",
    "scope": null,
    "escapedName": "range_check",
    "name": "range_check",
    "rawSpec": "1.4.0",
    "spec": "1.4.0",
    "type": "version"
  },
  "_requiredBy": [
    "/keystone"
  ],
  "_resolved": "https://registry.npmjs.org/range_check/-/range_check-1.4.0.tgz",
  "_shasum": "cd87c7ac62c40ba9df69b8703c604f60c3748635",
  "_shrinkwrap": null,
  "_spec": "range_check@1.4.0",
  "_where": "/home/connextcms/test/node_modules/keystone",
  "author": {
    "name": "Kevin Whitman",
    "url": "https://github.com/keverw"
  },
  "bugs": {
    "url": "https://github.com/keverw/range_check/issues"
  },
  "dependencies": {
    "ip6": "0.0.4",
    "ipaddr.js": "1.2"
  },
  "description": "This is a simple module to validate IP address, check ip address version, check if ip is within a range.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "cd87c7ac62c40ba9df69b8703c604f60c3748635",
    "tarball": "https://registry.npmjs.org/range_check/-/range_check-1.4.0.tgz"
  },
  "gitHead": "a4a62e2ef101d6a2d3b161c27bd309133d38902b",
  "homepage": "https://github.com/keverw/range_check#readme",
  "keywords": [
    "IP Address",
    "CIDR",
    "V4",
    "V6",
    "valid",
    "range",
    "addr",
    "ip",
    "ipv4",
    "ipv6"
  ],
  "license": "BSD",
  "main": "range_check.js",
  "maintainers": [
    {
      "name": "keverw",
      "email": "keverw92@gmail.com"
    }
  ],
  "name": "range_check",
  "optionalDependencies": {},
  "publishConfig": {
    "registry": "https://registry.npmjs.org/"
  },
  "readme": "# Range Check v1.4.0\n[![npm version](https://badge.fury.io/js/range_check.svg)](https://badge.fury.io/js/range_check) &nbsp; [![Build Status](https://travis-ci.org/keverw/range_check.svg?branch=master)](https://travis-ci.org/keverw/range_check)\n\nThis is a simple module to validate IP address, check IP address version, check if IP is within a range.\n\nThis started out as `range_check` but it does much more than just checking ranges but since it's already got a large amount of downloads (37,115 downloads in the last month as of this writing) I'll keep the name the same even though I kinda want to change it to something better.\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Install](#install)\n- [IP Functions](#ip-functions)\n  - [Check if IP is valid](#check-if-ip-is-valid)\n  - [Check IP version](#check-ip-version)\n    - [Ver](#ver)\n    - [isV4](#isv4)\n    - [isV6](#isv6)\n  - [storeIP](#storeip)\n  - [searchIP](#searchip)\n  - [displayIP](#displayip)\n- [Range Functions](#range-functions)\n  - [Check if range is valid](#check-if-range-is-valid)\n  - [Check if IP is within range](#check-if-ip-is-within-range)\n- [Dependencies](#dependencies)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Install\n\nTo set up Range Check on your Node.js server use npm.\n\n`npm install range_check`\n\n## IP Functions\n### Check if IP is valid\n\n```js\nvar rangeCheck = require('range_check');\nconsole.log(rangeCheck.isIP('10.0.1.5')); //returns true or false\n```\n\n### Check IP version\n#### Ver\n```\nvar rangeCheck = require('range_check');\nconsole.log(rangeCheck.ver('10.0.1.5')); //returns 4\nconsole.log(rangeCheck.ver('2001:4860:8006::62')); //returns 6\nconsole.log(rangeCheck.ver('foo')); //returns 0 as invalid IP address\n```\n\n#### isV4\n```js\nvar rangeCheck = require('range_check');\n\nconsole.log(rangeCheck.isV4('10.0.1.5')); //true\nconsole.log(rangeCheck.isV4('foo')); //false\nconsole.log(rangeCheck.isV4('123::123')); //false\n```\n\n#### isV6\n```js\nvar rangeCheck = require('range_check');\n\nconsole.log(rangeCheck.isV6('123::123')); //true\nconsole.log(rangeCheck.isV6('foo')); //false\nconsole.log(rangeCheck.isV6('10.0.1.5')); //false\n```\n\n### storeIP\nThis function is useful to get a consistent IP address such for storing it in a database or when searching in a database after being stored using this. So if a V6 address was sent compacted or not, or if you searched by either version this function would make sure you get a consistent IP address for both versions. Also the possibly of saving a few bytes.\n\nIf an V6 addressed mapped as v4 is given it will convert it to V4, If any other V6 address is given it is __abbreviated__ and plain V4 addresses are left alone. Returns null if a invalid IP\n\n```js\nvar rangeCheck = require('../range_check.js');\n\nconsole.log(rangeCheck.storeIP('foo')); //null\nconsole.log(rangeCheck.storeIP('::ffff:127.0.0.1')); //127.0.0.1\nconsole.log(rangeCheck.storeIP('2001:0000:0111:0000:0011:0000:0001:0000')); //2001:0:111:0:11:0:1:0\nconsole.log(rangeCheck.storeIP('2001:0001:0000:0001:0000:0000:0000:0000')); //2001:1:0:1::\nconsole.log(rangeCheck.storeIP('0000:0000:0000:0000:0000:0000:0000:0000')); //::\nconsole.log(rangeCheck.storeIP('0000:0000:0000:0000:0000:0000:0000:0001')); //::1\nconsole.log(rangeCheck.storeIP('2041:0000:140F:0000:0000:0000:875B:131B')); //2041:0:140F::875B:131B\nconsole.log(rangeCheck.storeIP('2001:0001:0002:0003:0004:0005:0006:0007')); //2001:1:2:3:4:5:6:7\nconsole.log(rangeCheck.storeIP('127.0.0.1')); //127.0.0.1\n```\n\n### searchIP\nSame function as `storeIP`, just a clearer name when you are using it for search instead\n\n### displayIP\nThis function is useful for displaying IP addresses, such as after grabbing it back from the database when using `storeIP`\n\nIf an V6 addressed mapped as v4 is given it will convert it to V4, If any other V6 address is given it is __normalized__ into the longer version and plain V4 addresses are left alone. Returns a empty string if a invalid IP\n\n```js\nvar rangeCheck = require('../range_check.js');\n\nconsole.log(rangeCheck.displayIP(null)); // ''\nconsole.log(rangeCheck.displayIP('::ffff:127.0.0.1')); //'127.0.0.1'\nconsole.log(rangeCheck.displayIP('2001:0:111:0:11:0:1:0')); //'2001:0000:0111:0000:0011:0000:0001:0000'\nconsole.log(rangeCheck.displayIP('2001:1:0:1::')); //'2001:0001:0000:0001:0000:0000:0000:0000'\nconsole.log(rangeCheck.displayIP('::')); //'0000:0000:0000:0000:0000:0000:0000:0000'\nconsole.log(rangeCheck.displayIP('::1')); //'0000:0000:0000:0000:0000:0000:0000:0001'\nconsole.log(rangeCheck.displayIP('2041:0:140F::875B:131B')); //'2041:0000:140F:0000:0000:0000:875B:131B'\nconsole.log(rangeCheck.displayIP('2001:1:2:3:4:5:6:7')); //'2001:0001:0002:0003:0004:0005:0006:0007'\nconsole.log(rangeCheck.displayIP('127.0.0.1')); //'127.0.0.1'\n\n```\n\n## Range Functions\n\n### Check if range is valid\n\nYou can use isRange if you want to validate an entire range.\n\n```js\nvar rangeCheck = require('range_check');\n\nconsole.log(rangeCheck.isRange('2001:db8::/32')); //true\nconsole.log(rangeCheck.isRange('10.0.0.0/8')); // true\nconsole.log(rangeCheck.isRange('qwerty')); // false\n\n```\n\n### Check if IP is within range\n```js\nvar rangeCheck = require('range_check');\nconsole.log(rangeCheck.inRange('10.0.1.5', '10.0.0.0/8')); //returns true\n\nconsole.log(rangeCheck.inRange('192.0.1.5', '10.0.0.0/8')); //returns false\n\nconsole.log(rangeCheck.inRange('2001:db8:1234::1', '2001:db8::/32')); //returns true\n```\n\nYou can also give a list of ranges\n\n```js\nvar rangeCheck = require('range_check');\nconsole.log(rangeCheck.inRange('192.168.1.1', ['10.0.0.0/8', '192.0.0.0/8'])); //returns true\n\n```\n\n## Dependencies\n* ipaddr.js - [https://github.com/whitequark/ipaddr.js](https://github.com/whitequark/ipaddr.js)\n* ip6 - [https://github.com/elgs/ip6](https://github.com/elgs/ip6)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/keverw/range_check.git"
  },
  "scripts": {},
  "version": "1.4.0"
}

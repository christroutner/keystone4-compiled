{
  "_args": [
    [
      {
        "raw": "le-acme-core@^2.0.5",
        "scope": null,
        "escapedName": "le-acme-core",
        "name": "le-acme-core",
        "rawSpec": "^2.0.5",
        "spec": ">=2.0.5 <3.0.0",
        "type": "range"
      },
      "/home/connextcms/test/node_modules/letsencrypt"
    ]
  ],
  "_from": "le-acme-core@>=2.0.5 <3.0.0",
  "_id": "le-acme-core@2.0.9",
  "_inCache": true,
  "_location": "/le-acme-core",
  "_nodeVersion": "7.4.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/le-acme-core-2.0.9.tgz_1484686261876_0.638753917068243"
  },
  "_npmUser": {
    "name": "drewwarrentiy",
    "email": "drewwarrentiy@gmail.com"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "le-acme-core@^2.0.5",
    "scope": null,
    "escapedName": "le-acme-core",
    "name": "le-acme-core",
    "rawSpec": "^2.0.5",
    "spec": ">=2.0.5 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/letsencrypt"
  ],
  "_resolved": "https://registry.npmjs.org/le-acme-core/-/le-acme-core-2.0.9.tgz",
  "_shasum": "6f90042c34cf67474d136618912e576907f77914",
  "_shrinkwrap": null,
  "_spec": "le-acme-core@^2.0.5",
  "_where": "/home/connextcms/test/node_modules/letsencrypt",
  "browser": "browser.js",
  "bugs": {
    "url": "https://git.daplie.com/Daplie/le-acme-core/issues"
  },
  "contributors": [
    {
      "name": "ISRG"
    },
    {
      "name": "Anatol Sommer",
      "email": "anatol@anatol.at"
    },
    {
      "name": "AJ ONeal",
      "email": "aj@daplie.com",
      "url": "https://daplie.com/"
    }
  ],
  "dependencies": {
    "request": "^2.74.0",
    "rsa-compat": "^1.2.7"
  },
  "description": "A framework for building letsencrypt clients, forked from letiny",
  "devDependencies": {},
  "directories": {
    "example": "example",
    "test": "test"
  },
  "dist": {
    "shasum": "6f90042c34cf67474d136618912e576907f77914",
    "tarball": "https://registry.npmjs.org/le-acme-core/-/le-acme-core-2.0.9.tgz"
  },
  "gitHead": "72646ced80c480c0ae428932ef6e017f9db82199",
  "homepage": "https://git.daplie.com/Daplie/le-acme-core#readme",
  "keywords": [
    "le-acme",
    "le-acme-",
    "tiny",
    "acme",
    "letsencrypt",
    "client",
    "pem",
    "jwk",
    "pfx"
  ],
  "license": "MPL-2.0",
  "main": "node.js",
  "maintainers": [
    {
      "name": "coolaj86",
      "email": "coolaj86@gmail.com"
    },
    {
      "name": "drewwarrentiy",
      "email": "drewwarrentiy@gmail.com"
    }
  ],
  "name": "le-acme-core",
  "optionalDependencies": {},
  "readme": "<!-- BANNER_TPL_BEGIN -->\n\nAbout Daplie: We're taking back the Internet!\n--------------\n\nDown with Google, Apple, and Facebook!\n\nWe're re-decentralizing the web and making it read-write again - one home cloud system at a time.\n\nTired of serving the Empire? Come join the Rebel Alliance:\n\n<a href=\"mailto:jobs@daplie.com\">jobs@daplie.com</a> | [Invest in Daplie on Wefunder](https://daplie.com/invest/) | [Pre-order Cloud](https://daplie.com/preorder/), The World's First Home Server for Everyone\n\n<!-- BANNER_TPL_END -->\n\n# le-acme-core\n\nLooking for **letiny-core**? Check the [v1.x branch](https://github.com/Daplie/le-acme-core/tree/v1.x).\n\n<!-- rename to le-acme-core -->\n\nA framework for building letsencrypt clients, forked from `letiny`.\n\nSupports all of:\n\n  * node with `ursa` (works fast)\n  * node with `forge` (works on windows)\n  * browser WebCrypto (not implemented, but... Let's Encrypt over WebRTC anyone?)\n  * any javascript implementation\n\n### These aren't the droids you're looking for\n\nThis is a library / framework for building letsencrypt clients.\nYou probably want one of these pre-built clients instead:\n\n  * [`letsencrypt`](https://github.com/Daplie/node-letsencrypt) (compatible with the official client)\n  * `letiny` (lightweight client cli)\n  * [`letsencrypt-express`](https://github.com/Daplie/letsencrypt-express) (automatic https for express)\n\n## Install & Usage:\n\n```bash\nnpm install --save le-acme-core\n```\n\nTo use the default dependencies:\n\n```javascript\n'use strict';\n\nvar ACME = require('le-acme-core').ACME.create();\n```\n\nFor **testing** and **development**, you can also inject the dependencies you want to use:\n\n```javascript\n'use strict';\n\nvar ACME = require('le-acme-core').ACME.create({\n  request: require('request')\n, RSA: require('rsa-compat').RSA\n});\n\n// now uses node `request` (could also use jQuery or Angular in the browser)\nACME.getAcmeUrls(discoveryUrl, function (err, urls) {\n  console.log(urls);\n});\n```\n\nYou will follow these steps to obtain certificates:\n\n* discover ACME registration urls with `getAcmeUrls`\n* register a user account with `registerNewAccount`\n* implement a method to agree to the terms of service as `agreeToTos`\n* get certificates with `getCertificate`\n* implement a method to store the challenge token as `setChallenge`\n* implement a method to get the challenge token as `getChallenge`\n* implement a method to remove the challenge token as `removeChallenge`\n\n### Demo\n\nYou can see this working for yourself, but you'll need to be on an internet connected computer with a domain.\n\nGet a temporary domain for testing\n\n```bash\nnpm install -g ddns-cli\nddns --random --email user@example.com --agree\n```\n\nNote: use **YOUR EMAIL** and accept the terms of service (run `ddns --help` to see them).\n\n<!-- TODO tutorial on ddns -->\n\nInstall le-acme-core and its dependencies. **Note**: it's okay if you're on windows\nand `ursa` fails to compile. It'll still work.\n\n```bash\ngit clone https://github.com/Daplie/le-acme-core.git ~/le-acme-core\npushd ~/le-acme-core\n\nnpm install\n```\n\nRun the demo:\n\n```bash\nnode examples/letsencrypt.js user@example.com example.com\n```\n\nNote: use **YOUR TEMPORARY DOMAIN** and **YOUR EMAIL**.\n\n## API\n\nThe Goodies\n\n```javascript\n// Accounts\nACME.registerNewAccount(options, cb)        // returns \"regr\" registration data\n\n    { newRegUrl: '<url>'                      //    no defaults, specify acmeUrls.newAuthz\n    , email: '<email>'                        //    valid email (server checks MX records)\n    , accountKeypair: {                       //    privateKeyPem or privateKeyJwt\n        privateKeyPem: '<ASCII PEM>'\n      }\n    , agreeToTerms: fn (tosUrl, cb) {}        //    must specify agree=tosUrl to continue (or falsey to end)\n    }\n\n// Registration\nACME.getCertificate(options, cb)            // returns (err, pems={ privkey (key), cert, chain (ca) })\n\n    { newAuthzUrl: '<url>'                    //    specify acmeUrls.newAuthz\n    , newCertUrl: '<url>'                     //    specify acmeUrls.newCert\n\n    , domainKeypair: {\n        privateKeyPem: '<ASCII PEM>'\n      }\n    , accountKeypair: {\n        privateKeyPem: '<ASCII PEM>'\n      }\n    , domains: ['example.com']\n\n    , setChallenge: fn (hostname, key, val, cb)\n    , removeChallenge: fn (hostname, key, cb)\n    }\n\n// Discovery URLs\nACME.getAcmeUrls(acmeDiscoveryUrl, cb)      // returns (err, acmeUrls={newReg,newAuthz,newCert,revokeCert})\n```\n\nHelpers & Stuff\n\n```javascript\n// Constants\nACME.productionServerUrl                // https://acme-v01.api.letsencrypt.org/directory\nACME.stagingServerUrl                   // https://acme-staging.api.letsencrypt.org/directory\nACME.acmeChallengePrefix                // /.well-known/acme-challenge/\nACME.knownEndpoints                     // new-authz, new-cert, new-reg, revoke-cert\n\n\n// HTTP Client Helpers\nACME.Acme                               // Signs requests with JWK\n    acme = new Acme(keypair)                // 'keypair' is an object with `privateKeyPem` and/or `privateKeyJwk`\n    acme.post(url, body, cb)                // POST with signature\n    acme.parseLinks(link)                   // (internal) parses 'link' header\n    acme.getNonce(url, cb)                  // (internal) HEAD request to get 'replay-nonce' strings\n```\n\n## Example\n\nBelow you'll find a stripped-down example. You can see the full example in the example folder.\n\n* [example/](https://github.com/Daplie/le-acme-core/blob/master/example/)\n\n#### Register Account & Domain\n\nThis is how you **register an ACME account** and **get an HTTPS certificate**\n\n```javascript\n'use strict';\n\nvar ACME = require('le-acme-core').ACME.create();\nvar RSA = require('rsa-compat').RSA;\n\nvar email = 'user@example.com';                   // CHANGE TO YOUR EMAIL\nvar domains = 'example.com';                      // CHANGE TO YOUR DOMAIN\nvar acmeDiscoveryUrl = ACME.stagingServerUrl;   // CHANGE to production, when ready\n\nvar accountKeypair = null;                        // { privateKeyPem: null, privateKeyJwk: null };\nvar domainKeypair = null;                         // same as above\nvar acmeUrls = null;\n\nRSA.generateKeypair(2048, 65537, function (err, keypair) {\n    accountKeypair = keypair;\n    // ...\n    ACME.getAcmeUrls(acmeDiscoveryUrl, function (err, urls) {\n        // ...\n        runDemo();\n    });\n});\n\nfunction runDemo() {\n    ACME.registerNewAccount(\n        { newRegUrl: acmeUrls.newReg\n        , email: email\n        , accountKeypair: accountKeypair\n        , agreeToTerms: function (tosUrl, done) {\n\n              // agree to the exact version of these terms\n              done(null, tosUrl);\n          }\n        }\n      , function (err, regr) {\n\n            ACME.getCertificate(\n                { newAuthzUrl: acmeUrls.newAuthz\n                , newCertUrl: acmeUrls.newCert\n\n                , domainKeypair: domainKeypair\n                , accountKeypair: accountKeypair\n                , domains: domains\n\n                , setChallenge: challengeStore.set\n                , removeChallenge: challengeStore.remove\n                }\n              , function (err, certs) {\n\n                  // Note: you should save certs to disk (or db)\n                  certStore.set(domains[0], certs, function () {\n\n                      // ...\n\n                  });\n\n                }\n            );\n        }\n    );\n}\n```\n\n**But wait**, there's more!\nSee [example/letsencrypt.js](https://github.com/Daplie/le-acme-core/blob/master/example/letsencrypt.js)\n\n#### Run a Server on 80, 443, and 5001 (https/tls)\n\nThat will fail unless you have a webserver running on 80 and 443 (or 5001)\nto respond to `/.well-known/acme-challenge/xxxxxxxx` with the proper token\n\n```javascript\nvar https = require('https');\nvar http = require('http');\n\n\nvar LeCore = deps.LeCore;\nvar httpsOptions = deps.httpsOptions;\nvar challengeStore = deps.challengeStore;\nvar certStore = deps.certStore;\n\n\n//\n// Challenge Handler\n//\nfunction acmeResponder(req, res) {\n  if (0 !== req.url.indexOf(LeCore.acmeChallengePrefix)) {\n    res.end('Hello World!');\n    return;\n  }\n\n  var key = req.url.slice(LeCore.acmeChallengePrefix.length);\n\n  challengeStore.get(req.hostname, key, function (err, val) {\n    res.end(val || 'Error');\n  });\n}\n\n\n//\n// Server\n//\nhttps.createServer(httpsOptions, acmeResponder).listen(5001, function () {\n  console.log('Listening https on', this.address());\n});\nhttp.createServer(acmeResponder).listen(80, function () {\n  console.log('Listening http on', this.address());\n});\n```\n\n**But wait**, there's more!\nSee [example/serve.js](https://github.com/Daplie/le-acme-core/blob/master/example/serve.js)\n\n#### Put some storage in place\n\nFinally, you need an implementation of `challengeStore`:\n\n```javascript\nvar challengeCache = {};\nvar challengeStore = {\n  set: function (hostname, key, value, cb) {\n    challengeCache[key] = value;\n    cb(null);\n  }\n, get: function (hostname, key, cb) {\n    cb(null, challengeCache[key]);\n  }\n, remove: function (hostname, key, cb) {\n    delete challengeCache[key];\n    cb(null);\n  }\n};\n\nvar certCache = {};\nvar certStore = {\n  set: function (hostname, certs, cb) {\n    certCache[hostname] = certs;\n    cb(null);\n  }\n, get: function (hostname, cb) {\n    cb(null, certCache[hostname]);\n  }\n, remove: function (hostname, cb) {\n    delete certCache[hostname];\n    cb(null);\n  }\n};\n```\n\n**But wait**, there's more!\nSee\n\n* [example/challenge-store.js](https://github.com/Daplie/le-acme-core/blob/master/challenge-store.js)\n* [example/cert-store.js](https://github.com/Daplie/le-acme-core/blob/master/cert-store.js)\n\n## Authors\n\n  * ISRG\n  * Anatol Sommer  (https://github.com/anatolsommer)\n  * AJ ONeal <aj@daplie.com> (https://daplie.com)\n\n## Licence\n\nMPL 2.0\n\nAll of the code is available under the MPL-2.0.\n\nSome of the files are original work not modified from `letiny`\nand are made available under MIT and Apache-2.0 as well (check file headers).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://git.daplie.com/Daplie/le-acme-core.git"
  },
  "scripts": {
    "test": "node example/letsencrypt.js"
  },
  "version": "2.0.9"
}

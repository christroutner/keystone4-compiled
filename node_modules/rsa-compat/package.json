{
  "_args": [
    [
      {
        "raw": "rsa-compat@^1.2.1",
        "scope": null,
        "escapedName": "rsa-compat",
        "name": "rsa-compat",
        "rawSpec": "^1.2.1",
        "spec": ">=1.2.1 <2.0.0",
        "type": "range"
      },
      "/home/connextcms/test/node_modules/letsencrypt"
    ]
  ],
  "_from": "rsa-compat@>=1.2.1 <2.0.0",
  "_id": "rsa-compat@1.2.7",
  "_inCache": true,
  "_location": "/rsa-compat",
  "_nodeVersion": "6.3.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/rsa-compat-1.2.7.tgz_1471414947846_0.7010982590727508"
  },
  "_npmUser": {
    "name": "coolaj86",
    "email": "coolaj86@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "rsa-compat@^1.2.1",
    "scope": null,
    "escapedName": "rsa-compat",
    "name": "rsa-compat",
    "rawSpec": "^1.2.1",
    "spec": ">=1.2.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/le-acme-core",
    "/le-tls-sni",
    "/letsencrypt"
  ],
  "_resolved": "https://registry.npmjs.org/rsa-compat/-/rsa-compat-1.2.7.tgz",
  "_shasum": "7c4636de798885a9f3c90436ea3804e35b1684c8",
  "_shrinkwrap": null,
  "_spec": "rsa-compat@^1.2.1",
  "_where": "/home/connextcms/test/node_modules/letsencrypt",
  "author": {
    "name": "AJ ONeal",
    "email": "coolaj86@gmail.com",
    "url": "https://coolaj86.com/"
  },
  "bin": {
    "rsa-keygen-js": "bin/rsa-keygen.js"
  },
  "bugs": {
    "url": "https://github.com/Daplie/rsa-compat.js/issues"
  },
  "dependencies": {
    "buffer-v6-polyfill": "^1.0.3",
    "node-forge": "^0.6.41",
    "ursa": "^0.9.4"
  },
  "description": "RSA utils that work on Windows, Mac, and Linux with or without C compiler",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "7c4636de798885a9f3c90436ea3804e35b1684c8",
    "tarball": "https://registry.npmjs.org/rsa-compat/-/rsa-compat-1.2.7.tgz"
  },
  "gitHead": "4fe1f4b35869aa164255cc7f72949dc2b1613160",
  "homepage": "https://github.com/Daplie/rsa-compat.js#readme",
  "keywords": [
    "RSA",
    "ursa",
    "forge",
    "certificate",
    "tls",
    "ssl",
    "javascript",
    "js",
    "node",
    "node.js",
    "windows",
    "mac",
    "linux",
    "macOS",
    "win",
    "key",
    "jwk"
  ],
  "license": "(MIT OR Apache-2.0)",
  "main": "node.js",
  "maintainers": [
    {
      "name": "coolaj86",
      "email": "coolaj86@gmail.com"
    }
  ],
  "name": "rsa-compat",
  "optionalDependencies": {
    "ursa": "^0.9.4"
  },
  "readme": "# rsa-compat.js\n\nJavaScript RSA utils that work on Windows, Mac, and Linux with or without C compiler\n\nIn order to provide a module that \"just works\" everywhere, we mix and match methods\nfrom `node.js` core, `ursa`, `forge`, and others.\n\nThis is useful for **certbot** and **letsencrypt**.\n\n(in the future we'd like to provide the same API to the browser)\n\nInstall\n=======\n\n```\n# node.js\nnpm install --save rsa-compat\n\n# CLI\nnpm install --global rsa-compat\n```\n\n\nUsage\n=====\n\nCLI\n---\n\nYou can generate keypairs on Windows, Mac, and Linux using rsa-keygen-js:\n\n```bash\n# generates a new keypair in the current directory\nrsa-keypiar-js\n```\n\nExamples\n--------\n\nGenerate an RSA Keypair:\n\n```javascript\nvar RSA = require('rsa-compat').RSA;\n\nvar bitlen = 1024;\nvar exp = 65537;\nvar options = { public: true, pem: true, internal: true };\n\nRSA.generateKeypair(bitlen, exp, options, function (err, keypair) {\n  console.log(keypair);\n});\n```\n\nHere's what the object might look like:\n\n`console.log(keypair)`:\n```javascript\n\n{ publicKeyPem: '-----BEGIN RSA PUBLIC KEY-----\\n/*base64 pem-encoded string*/'\n, privateKeyPem: '-----BEGIN RSA PRIVATE KEY-----\\n/*base64 pem-encoded string*/'\n, privateKeyJwk: {\n    kty: \"RSA\"\n  , n: '/*base64 modulus n = pq*/'\n  , e: '/*base64 exponent (usually 65537)*/'\n  , d: '/*base64 private exponent (d = e^−1 (mod ϕ(n))/'\n  , p: '/*base64 first prime*/'\n  , q: '/*base64 second prime*/'\n  , dp: '/*base64 first exponent for Chinese remainder theorem (dP = d (mod p−1))*/'\n  , dq: '/*base64 Second exponent, used for CRT (dQ = d (mod q−1))/'\n  , qi: '/*base64 Coefficient, used for CRT (qinv = q^−1 (mod p))*/'\n  }\n, publicKeyJwk: {\n    kty: \"RSA\"\n  , n: '/*base64 modulus n = pq*/'\n  , e: '/*base64 exponent (usually 65537)*/'\n  }\n\n, _ursa: '/*undefined or intermediate ursa object*/'\n, _ursaPublic: '/*undefined or intermediate ursa object*/'\n, _forge: '/*undefined or intermediate forge object*/'\n, _forgePublic: '/*undefined or intermediate forge object*/'\n}\n```\n\nNOTE: this object is JSON safe as _ursa and _forge will be ignored\n\nSee http://crypto.stackexchange.com/questions/6593/what-data-is-saved-in-rsa-private-key to learn a little more about the meaning of the specific fields in the JWK.\n\nAPI\n---\n\n* `RSA.generateKeypair(bitlen, exp, options, cb)`\n* `RSA.import(keypair, options)`\n* `RSA.exportPrivatePem(keypair)`\n* `RSA.exportPublicPem(keypair)`\n* `RSA.exportPrivateJwk(keypair)`\n* `RSA.exportPublicJwk(keypair)`\n* `RSA.signJws(keypair, payload, nonce)`\n* `RSA.generateCsrPem(keypair, names)`\n* `RSA.generateCsrDerWeb64(keypair, names)`\n\n`keypair` can be any object with any of these keys `publicKeyPem, privateKeyPem, publicKeyJwk, privateKeyJwk`\n\n### RSA.generateKeypair(bitlen, exp, options, cb)\n\nCreate a private keypair and export it as PEM, JWK, and/or internal formats\n\n```javascript\nRSA.generateKeypair(null, null, null, function (keypair) { /*...*/ });\n\nRSA.generateKeypair(1024, 65537, { pem: false, public: false, internal: false }, function (keypair) { /*...*/ });\n```\n\n`bitlen`: *1024* (default), 2048, or 4096\n\n`exp`: *65537* (default)\n\n`options`:\n```javascript\n{ public: false       // export public keys\n, pem: false          // export pems\n, jwk: true           // export jwks\n, internal: false     // preserve internal intermediate formats (_ursa, _forge)\n, thumbprint: false   // JWK sha256 thumbprint\n, fingerprint: false  // NOT IMPLEMENTED (RSA key fingerprint)\n}\n```\n\n### RSA.import(keypair, options)\n\nImports keypair as JWKs and internal values `_ursa` and `_forge`.\n\n```javascript\nvar keypair = RSA.import({ privateKeyPem: '...'});\n\nconsole.log(keypair);\n```\n\n```javascript\n{ privateKeyPem: ..., privateKeyJwk: ..., _ursa: ..., _forge: ... }\n```\n\n### RSA.export*(keypair)\n\nYou put in an object like `{ privateKeyPem: '...' }` or `{ publicKeyJwk: {} }`\nand you get back the keys in the format you requested.\n\nNote:\n\n* Private keys **can** be used to export both private and public keys\n* Public keys can **NOT** be used to generate private keys\n\nExample:\n\n```javascript\nvar keypair = { privateKeyPem: '...' };\n\nkeypair.publicKeyJwk = RSA.exportPublicJwk(keypair);\n\nconsole.log(keypair);\n```\n\n### RSA.signJws(keypair, payload, nonce)\n\nGenerates a signature in JWS format (necessary for **certbot**/**letsencrypt**).\n\n```javascript\nvar message = \"Hello, World!\"\nvar nonce = crypto.randomBytes(16).toString('hex');\nvar jws = RSA.signJws(keypair, message, nonce);\n\nconsole.log(jws);\n```\n\nThe result looks like this:\n\n```javascript\n{ \"header\": {\n    \"alg\": \"RS256\",\n    \"jwk\": {\n      \"kty\": \"RSA\",\n      \"n\": \"AMJubTfOtAarnJytLE8fhNsEI8wnpjRvBXGK/Kp0675J10ORzxyMLqzIZF3tcrUkKBrtdc79u4X0GocDUgukpfkY+2UPUS/GxehUYbYrJYWOLkoJWzxn7wfoo9X1JgvBMY6wHQnTKvnzZdkom2FMhGxkLaEUGDSfsNznTTZNBBg9\",\n      \"e\": \"AQAB\"\n    }\n  },\n  \"protected\": \"eyJub25jZSI6IjhlZjU2MjRmNWVjOWQzZWYifQ\",\n  \"payload\": \"JLzF1NBNCV3kfbJ5sFaFyX94fJuL2H-IzaoBN-ciiHk\",\n  \"signature\": \"Wb2al5SDyh5gjmkV79MK9m3sfNBBPjntSKor-34BBoGwr6n8qEnBmqB1Y4zbo-5rmvsoPmJsnRlP_hRiUY86zSAQyfbisTGrGBl0IQ7ditpkfYVm0rBWJ8WnYNqYNp8K3qcD7NW72tsy-XoWEjNlz4lWJeRdEG2Nt4CJgnREH4Y\"\n}\n```\n\n### RSA.generateCsr*(keypair, names)\n\nYou can generate the CSR in human-readable or binary / base64 formats:\n\n`RSA.generateCsrPem(keypair, names)`:\n```javascript\nvar pem = RSA.generateCsrPem(keypair, [ 'example.com', 'www.example.com' ]);\n\nconsole.log(pem);\n```\n\nweb-safe base64 for **certbot**/**letsencrypt**:\n\n`RSA.generateCsrDerWeb64(keypair, names)`:\n```javascript\nvar web64 = RSA.generateCsrDerWeb64(keypair, [ 'example.com', 'www.example.com' ]);\n\nconsole.log(web64);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Daplie/rsa-compat.js.git"
  },
  "scripts": {
    "test": "node tests"
  },
  "version": "1.2.7"
}

{
  "_args": [
    [
      {
        "raw": "numeral@2.0.4",
        "scope": null,
        "escapedName": "numeral",
        "name": "numeral",
        "rawSpec": "2.0.4",
        "spec": "2.0.4",
        "type": "version"
      },
      "/home/connextcms/test/node_modules/keystone"
    ]
  ],
  "_from": "numeral@2.0.4",
  "_id": "numeral@2.0.4",
  "_inCache": true,
  "_location": "/numeral",
  "_nodeVersion": "6.9.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/numeral-2.0.4.tgz_1482352427047_0.41110660904087126"
  },
  "_npmUser": {
    "name": "adamwdraper",
    "email": "adamwdraper@gmail.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "numeral@2.0.4",
    "scope": null,
    "escapedName": "numeral",
    "name": "numeral",
    "rawSpec": "2.0.4",
    "spec": "2.0.4",
    "type": "version"
  },
  "_requiredBy": [
    "/keystone"
  ],
  "_resolved": "https://registry.npmjs.org/numeral/-/numeral-2.0.4.tgz",
  "_shasum": "545a0c709e090a9cf79bebec802b93f60061f038",
  "_shrinkwrap": null,
  "_spec": "numeral@2.0.4",
  "_where": "/home/connextcms/test/node_modules/keystone",
  "author": {
    "name": "Adam Draper",
    "email": "adamwdraper@gmail.com",
    "url": "http://github.com/adamwdraper"
  },
  "bugs": {
    "url": "https://github.com/adamwdraper/Numeral-js/issues"
  },
  "dependencies": {},
  "description": "Format and manipulate numbers.",
  "devDependencies": {
    "chai": "^3.5.0",
    "grunt": "latest",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-jshint": "latest",
    "grunt-contrib-nodeunit": "1.0.0",
    "grunt-contrib-uglify": "latest",
    "grunt-karma": "^2.0.0",
    "grunt-mocha-test": "^0.13.2",
    "grunt-saucelabs": "*",
    "grunt-string-replace": "^1.3.1",
    "karma": "^1.3.0",
    "karma-chai": "^0.1.0",
    "karma-chrome-launcher": "^2.0.0",
    "karma-firefox-launcher": "^1.0.0",
    "karma-mocha": "^1.3.0",
    "karma-mocha-reporter": "^2.2.1",
    "karma-sauce-launcher": "^1.1.0",
    "load-grunt-tasks": "^3.5.2",
    "mocha": "^3.1.2",
    "uglify-js": "latest"
  },
  "directories": {},
  "dist": {
    "shasum": "545a0c709e090a9cf79bebec802b93f60061f038",
    "tarball": "https://registry.npmjs.org/numeral/-/numeral-2.0.4.tgz"
  },
  "ender": "./ender.js",
  "engines": {
    "node": "*"
  },
  "gitHead": "a7a2dedde724ee6c74cf3370b958c06d19c54659",
  "homepage": "http://numeraljs.com",
  "keywords": [
    "numeral",
    "number",
    "format",
    "time",
    "money",
    "percentage"
  ],
  "license": "MIT",
  "main": "./numeral.js",
  "maintainers": [
    {
      "name": "adamwdraper",
      "email": "adamwdraper@gmail.com"
    }
  ],
  "name": "numeral",
  "optionalDependencies": {},
  "readme": "# [Numeral.js](http://numeraljs.com/)\n\nA javascript library for formatting and manipulating numbers.\n\n[Website and documentation](http://numeraljs.com/)\n\n\n# Travis Build Status\n\nMaster [![Build Status](https://api.travis-ci.org/adamwdraper/Numeral-js.svg)](https://travis-ci.org/adamwdraper/Numeral-js)\n\nDevelop [![Build Status](https://travis-ci.org/adamwdraper/Numeral-js.svg?branch=develop)](https://travis-ci.org/adamwdraper/Numeral-js)\n\n# NPM\n\n[![NPM](https://nodei.co/npm/numeral.svg?downloads=true)](https://nodei.co/npm/numeral/)\n\n#CDNJS\n\n[![CDNJS](https://img.shields.io/cdnjs/v/numeral.js.svg)](https://cdnjs.com/libraries/numeral.js)\n\n# Contributing\n\n#### Important: Please create your branch from and submit pull requests to the `develop` branch.  All pull requests must include the appropriate tests.\n\n1. Fork the library\n\n2. [Install grunt](http://gruntjs.com/getting-started#installing-the-cli)\n\n3. Run `npm install` to install dependencies\n\n4. Create a new branch from `develop`\n\n5. Add your tests to the files in `/tests`\n\n6. To test your tests, run `grunt`\n\n7. When all your tests are passing, run `grunt dist` to compile and minify all files\n\n8. Submit a pull request to the `develop` branch.\n\n\n### Formats\n\nFormats now exist in their own files and act more or less as plugins. Check out the [bytes format](https://github.com/adamwdraper/Numeral-js/blob/master/src/formats/bytes.js) for an example of how to create one.\n\n\n### Locales\n\nWhen naming locale files use the [ISO 639-1 language codes](http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) supplemented by [ISO 3166-1](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes when necessary.\n\n### Locale translations will not be merged without unit tests.\n\nSee [the english unit tests](https://github.com/adamwdraper/Numeral-js/blob/master/tests/locales/en-gb.js) for an example.\n\n\n# Changelog\n\n### 2.0.4\n\nBug fix: Incorrect abbreviations for values rounded up [#187](https://github.com/adamwdraper/Numeral-js/issues/187)\n\nBug fix: Signed currency is inconsistent [#89](https://github.com/adamwdraper/Numeral-js/issues/89)\n\n### 2.0.2\n\nBug fix: Updated module definitions\n\n### 2.0.1\n\nBug fix: Fixed regression for webpack/browserify/rollup\n\n### 2.0.0\n\n2.0.0 brings a lot of breaking changes and a reorganization of the repo, but also simplifies the api as well as the creating of custom formats.\n\nBreaking change / Feature: All formats are now separate files.  This makes it easy to create custom formats, and will also allow for custom builds with only certain formats.  (Note: The built numeral.js still contains all formats in the repo).\n\nBreaking change / Feature: All formats and locales are now loaded using `numeral.register(type, name, {})`\n\nBreaking change: All `language` now renamed to `locale` and standardized to all lowercase filenames\n\nBreaking change: The `locale` function no longer loads locales, it only sets the current locale\n\nBreaking change: The `unformat` function has been removed `numeral().unformat(string)` and now happens on numeral init `numeral(string)`\n\nBreaking change / Feature: Bytes are now formatted as: `b` (base 1000)  and `ib` (base 1024)\n\nBreaking change: `numeral(NaN)` is now treated the same as `numeral(null)` and no longer throws an error\n\nFeature: Exponential format using `e+` or `e-`\n\nBug fix: Update to floating point helpers (Note: Numeral does not fix JS floating point errors, but look to our tests to see that it covers quite a few cases.)\n\n### 1.5.6\n\nBug fix: numeral converts strings to numbers\n\nBug fix: Null values return same as 0\n\n### 1.5.5\n\nContained breaking changes, recommended to use 1.5.6\n\nBug fix: Switch bytes back to `b` and change iecBinary to `ib`, and calculate both using 1024 for backwards compatibility\n\n### 1.5.4\n\nContained breaking changes, recommended to use 1.5.6\n\nTests: Changed all tests to use Mocha and Chai\n\nTests: Added browser tests for Chrome, Firefox, and IE using saucelabs\n\nAdded reset function to reset numeral to default options\n\nAdded nullFormat option\n\nUpdate reduce polyfill\n\nAdded Binary bytes\n\nBug fix: Fixes problem with many optional decimals\n\n### 1.5.3\n\nAdded currency symbol to optionally appear before negative sign / open paren\n\nAdded float precision math support\n\nAdded specification of abbreviation in thousands, millions, billions\n\n### 1.5.2\n\nBug fix: Unformat should pass through if given a number\n\nAdded a mechanism to control rounding behaviour\n\nAdded languageData() for getting and setting language props at runtime\n\n### 1.5.1\n\nBug fix: Make sure values aren't changed during formatting\n\n### 1.5.0\n\nAdd defaultFormat(). numeral().format() uses the default to format if no string is provided\n\n.unformat() returns 0 when passed no string\n\nAdded languages.js that contains all languages\n\nBug fix: Fix bug while unformatting ordinals\n\nAdd format option to always show signed value\n\nAdded ability to instantiate numeral with a string value of a number\n\n### 1.4.9\n\nBug fix: Fix bug while unformatting ordinals\n\n### 1.4.8\n\nBug fix: Throw error if language is not defined\n\n### 1.4.7\n\nBug fix: Fix typo for trillion\n\n### 1.4.6\n\nBug fix: remove ' from unformatting regex that was causing an error with fr-ch.js\n\n### 1.4.5\n\nAdd zeroFormat() function that accepts a string for custom formating of zeros\n\nAdd valueOf() function\n\nChain functionality to language function\n\nMake all minified files have the same .min.js filename ending\n\n### 1.4.1\n\nBug fix: Bytes not formatting correctly\n\n### 1.4.0\n\nAdd optional format for all decimals\n\n### 1.3.4\n\nRemove AMD module id. (This is encouraged by require.js to make the module more portable, and keep it from creating a global)\n\n### 1.3.3\n\nAMD define() compatibility.\n\n### 1.3.2\n\nBug fix: Formatting some numbers results in the wrong value. Issue #21\n\n### 1.3.1\n\nBug fix: Minor fix to unformatting parser\n\n### 1.3.0\n\nAdd support for spaces before/after $, a, o, b in a format string\n\nBug fix: Fix unformat for languages that use '.' in ordinals\n\nBug fix: Fix round up floating numbers with no precision correctly.\n\nBug fix: Fix currency signs at the end in unformat\n\n### 1.2.6\n\nAdd support for optional decimal places\n\n### 1.2.5\n\nAdd support for appending currency symbol\n\n### 1.2.4\n\nAdd support for humanized filesizes\n\n### 1.2.3\n\nBug Fix: Fix unformatting for languages that use '.' as thousands delimiter\n\n### 1.2.2\n\nChanged language definition property 'money' to 'currency'\n\n### 1.2.1\n\nBug fix: Fix unformatting non-negative abbreviations\n\n### 1.2.0\n\nAdd language support\n\nUpdate testing for to include languages\n\n### 1.1.0\n\nAdd Tests\n\nBug fix: Fix difference returning negative values\n\n### 1.0.4\n\nBug fix: Non negative numbers were displaying as negative when using parentheses\n\n### 1.0.3\n\nAdd ordinal formatting using 'o' in the format\n\n### 1.0.2\n\nAdd clone functionality\n\n### 1.0.1\n\nAdded abbreviations for thousands and millions using 'a' in the format\n\n### 1.0.0\n\nInitial release\n\n\n# Acknowlegements\n\nNumeral.js, while less complex, was inspired by and heavily borrowed from [Moment.js](http://momentjs.com)\n\n\n# License\n\nNumeral.js is freely distributable under the terms of the MIT license.\n\nCopyright (c) 2012 Adam Draper\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/adamwdraper/Numeral-js.git"
  },
  "scripts": {
    "test": "grunt"
  },
  "version": "2.0.4"
}

{
  "_args": [
    [
      {
        "raw": "keystone-storage-namefunctions@1.1.1",
        "scope": null,
        "escapedName": "keystone-storage-namefunctions",
        "name": "keystone-storage-namefunctions",
        "rawSpec": "1.1.1",
        "spec": "1.1.1",
        "type": "version"
      },
      "/home/connextcms/test/node_modules/keystone"
    ]
  ],
  "_from": "keystone-storage-namefunctions@1.1.1",
  "_id": "keystone-storage-namefunctions@1.1.1",
  "_inCache": true,
  "_location": "/keystone-storage-namefunctions",
  "_nodeVersion": "6.3.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/keystone-storage-namefunctions-1.1.1.tgz_1473087080933_0.4533851195592433"
  },
  "_npmUser": {
    "name": "jedwatson",
    "email": "jed.watson@me.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "keystone-storage-namefunctions@1.1.1",
    "scope": null,
    "escapedName": "keystone-storage-namefunctions",
    "name": "keystone-storage-namefunctions",
    "rawSpec": "1.1.1",
    "spec": "1.1.1",
    "type": "version"
  },
  "_requiredBy": [
    "/keystone"
  ],
  "_resolved": "https://registry.npmjs.org/keystone-storage-namefunctions/-/keystone-storage-namefunctions-1.1.1.tgz",
  "_shasum": "1f0986451b4e80dd434c38e0d1cd5d3c9d531b55",
  "_shrinkwrap": null,
  "_spec": "keystone-storage-namefunctions@1.1.1",
  "_where": "/home/connextcms/test/node_modules/keystone",
  "author": {
    "name": "Jed Watson"
  },
  "bugs": {
    "url": "https://github.com/keystonejs/keystone-storage-namefunctions/issues"
  },
  "dependencies": {},
  "description": "Simple functions for generating filenames",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "1f0986451b4e80dd434c38e0d1cd5d3c9d531b55",
    "tarball": "https://registry.npmjs.org/keystone-storage-namefunctions/-/keystone-storage-namefunctions-1.1.1.tgz"
  },
  "gitHead": "2ed6c4b8d663ab6cff167e2ca1bd9f29ca554437",
  "homepage": "https://github.com/keystonejs/keystone-storage-namefunctions#readme",
  "keywords": [
    "fs",
    "keystonejs",
    "keystone",
    "storage",
    "utils",
    "file",
    "filename"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "jedwatson",
      "email": "jed.watson@me.com"
    }
  ],
  "name": "keystone-storage-namefunctions",
  "optionalDependencies": {},
  "readme": "# keystone-storage-namefunctions\n\nSimple functions for generating filenames.\n\nBundled with [KeystoneJS](http://keystonejs.com)\n\n## Included Methods\n\n* `contentHashFilename` Calculate the filename from the sha1 hash of the file\n  contents\n* `originalFilename` Return the original filename provided in the file object\n* `randomFilename` Generate a random filename\n\n## Other modules in this package\n\n### `prototypeMethods`\n\nTwo methods are included to help reduce code repetition in adapters that can be\nadded to the adapter `prototype` when you want to handle filename generation:\n\n* `getFilename` - used to generate a filename for a given `file` object\n* `retryFilename` - used to retry a number of times when the `whenExists`\n  option value is `\"retry\"` (see below)\n\nThese methods both depend on a `fileExists(filename, callback)` method being\nimplemented on the adapter, and an `options` object on the adapter instance\nwith the following keys:\n\n* `options.generateFilename` - a method to generate the filename, e.g. from\n  this package\n* `options.whenExists` - one of `\"overwrite\"`, `\"error\"` or `\"retry\"`\n* `options.retryAttempts` - the maximum number of retry attempts when the\n  `whenExists` option value is `\"retry\"`\n\nUse them like this:\n\n```js\nvar prototypeMethods = require('keystone-storage-namefunctions/prototypeMethods');\nAdapter.prototype.getFilename = prototypeMethods.getFilename;\nAdapter.prototype.retryFilename = prototypeMethods.retryFilename;\nAdapter.prototype.fileExists = function (filename, callback) {\n\tvar result = false; // replace with actual logic\n\tcallback(null, result);\n}\nAdapter.prototype.uploadFile = function (file, callback) {\n\tthis.getFilename(file, function (err, filename) {\n\t\t// move the file into place\n\t});\n};\n```\n\n### `ensureCallback` utility\n\nThe `ensureCallback` method is also included, to standardise sync filename\nmethod call signatures. Use it like this:\n\n```js\nvar ensureCallback = require('keystone-storage-namefunctions/ensureCallback');\nfunction originalFilename (file, index) {\n\treturn file.originalname;\n}\nvar asyncOriginalFilename = ensureCallback(originalFilename);\nasyncOriginalFilename(file, index, function (err, result) {\n\t// result === file.originalname\n});\n```\n\n## License\n\nLicensed under The MIT License. Copyright (c) 2016 Jed Watson\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/keystonejs/keystone-storage-namefunctions.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.1.1"
}

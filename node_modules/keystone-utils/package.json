{
  "_args": [
    [
      {
        "raw": "keystone-utils@0.4.0",
        "scope": null,
        "escapedName": "keystone-utils",
        "name": "keystone-utils",
        "rawSpec": "0.4.0",
        "spec": "0.4.0",
        "type": "version"
      },
      "/home/connextcms/test/node_modules/keystone"
    ]
  ],
  "_from": "keystone-utils@0.4.0",
  "_id": "keystone-utils@0.4.0",
  "_inCache": true,
  "_location": "/keystone-utils",
  "_nodeVersion": "4.2.6",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/keystone-utils-0.4.0.tgz_1462713554264_0.5011134871747345"
  },
  "_npmUser": {
    "name": "jedwatson",
    "email": "jed.watson@me.com"
  },
  "_npmVersion": "2.14.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "keystone-utils@0.4.0",
    "scope": null,
    "escapedName": "keystone-utils",
    "name": "keystone-utils",
    "rawSpec": "0.4.0",
    "spec": "0.4.0",
    "type": "version"
  },
  "_requiredBy": [
    "/keystone"
  ],
  "_resolved": "https://registry.npmjs.org/keystone-utils/-/keystone-utils-0.4.0.tgz",
  "_shasum": "caccf1da741ff6633379f76bb05359f995b77d40",
  "_shrinkwrap": null,
  "_spec": "keystone-utils@0.4.0",
  "_where": "/home/connextcms/test/node_modules/keystone",
  "author": {
    "name": "Jed Watson"
  },
  "bugs": {
    "url": "https://github.com/JedWatson/keystone-utils/issues"
  },
  "dependencies": {
    "html-stringify": "^0.0.3",
    "i": "^0.3.5",
    "randomkey": "^1.0.0",
    "speakingurl": "^9.0.0"
  },
  "description": "A useful library of utilities used by KeystoneJS, and you!",
  "devDependencies": {
    "happiness": "^6.0.7",
    "mocha": "^2.4.0",
    "must": "^0.13.0"
  },
  "directories": {},
  "dist": {
    "shasum": "caccf1da741ff6633379f76bb05359f995b77d40",
    "tarball": "https://registry.npmjs.org/keystone-utils/-/keystone-utils-0.4.0.tgz"
  },
  "gitHead": "6b0809c760f9b4895168e40821fa37095b44dea4",
  "homepage": "https://github.com/JedWatson/keystone-utils#readme",
  "keywords": [
    "util",
    "utils",
    "string manipulation",
    "conversion",
    "helpers",
    "functional",
    "html",
    "string",
    "diacritics",
    "transliterate",
    "transliteration",
    "html entities"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "jedwatson",
      "email": "jed.watson@me.com"
    }
  ],
  "name": "keystone-utils",
  "optionalDependencies": {},
  "readme": "Keystone Utils\n==============\n\nA useful library of utilities for node.js used by\n[KeystoneJS](http://keystonejs.com) and you!\n\nIt provides additional functionality for manipulating and converting various\ntypes of data, including converting strings between various forms, and\nlightweight html &larr; &rarr; text conversion.\n\n\n## Usage\n\n\tnpm install keystone-utils --save\n\n... then ...\n\n\tvar utils = require('keystone-utils');\n\tconsole.log(utils.isObject({})); // true!\n\n### Bundled with KeystoneJS\n\nIf you're using [KeystoneJS](http://keystonejs.com), it exposes this library\nas `.utils`.\n\n\tvar keystone = require('keystone');\n\tvar utils = keystone.utils;\n\n\n## Test utilities\n\n*\t`isFunction(arg)` - determines if `arg` is a function\n*\t`isObject(arg)` - determines if `arg` is an object\n*\t`isValidObjectId(arg)` - determines if `arg` looks like a valid MongoDB ObjectId\n*\t`isArray(arg)` - determines if `arg` is an array\n*\t`isDate(arg)` - determines if `arg` is a date\n*\t`isString(arg)` - determines if `arg` is a string\n*\t`isNumber(arg)` - determines if `arg` is a number\n*\t`isDataURL(arg)` - determines if `arg` is a base64 encoded data URI\n*\t`isEmail(arg)` - make sure `arg` looks like a valid email address\n\t*\tUses a regular expression to check, so may cause false-negatives in\n\t\textremely rare cases. See http://www.regular-expressions.info/email.html\n\n## Option utilities\n\n*\t`options(defaults, options)` - copies and merges options into the defaults\n*\t`optionsMap(arr, property, clone)` - creates a map of options\n\t*\tTurns an array of objects into an object of objects, with each object\n\t\tunder the value of `property`\n\t*\tPerforms a deep clone of the objects when `clone` is set to true\n\n## Function utilities\n\n*\t`noop()` - a simple function that does nothing (\"no operation\")\n*\t`defer(fn, args...)` - wraps the function and invokes it in `process.nextTick`, great for Zalgo containment\n*\t`bindMethods(obj, scope)` - recursively binds method properties of `obj`\n\tto `scope` and returns a new object containing the bound methods.\n\n## Random utilities\n\n*\t`randomString(len, chars)` - Generates a 'random' string of characters to the\n\tspecified length (uses Math.random).\n\t*\t`len` can be an array of `[min, max]` length to generate\n\t*\t`chars` is a string of characters to include, defaults to\n\t\t`0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz`\n\n## Conversion utilities\n\n*\t`number(arg)` - converts a string to a number, accepting human-friendly input\n\t*\te.g. `1,432` &raquo; `1432`, `$1432` &raquo; `1432`, `2.5` &raquo; `2.5`\n*\t`escapeRegExp(str)` - escapes a string to be safely converted to a regular expression\n*\t`escapeString(str)` - escapes a string to be safely used as a Javascript string literal\n*\t`stripDiacritics(str)` - stips accented characters from a string, replacing them with their simple equivalents\n*\t`transliterate(str)` - transliterates Russian and Ukrainian words from cyrillic to latin\n*\t`singular(str)` - converts a string to its singular form\n*\t`plural(count, singular, plural)` - displays the singular or plural of a string\n\tbased on a number or number of items in an array.\n\t*\tReplaces `*` in the string with the number\n\t*\tWill automatically convert `singular` to `plural` when plural is not provided\n\t*\tWhen only given one argument, will return the plural form of a string\n\t*\te.g.\n\t\t*\t`plural(1, '* thing')` &raquo; `'1 thing'`\n\t\t*\t`plural(2, '* thing')` &raquo; `'2 things'`\n\t\t*\t`plural([1,2], 'single', 'couple')` &raquo; `'couple'`\n\t\t*\t`plural('friend')` &raquo; `'friends'`\n*\t`upcase(str)` - converts the first letter in a string to Uppercase\n*\t`downcase(str)` - converts the first letter in a string to lowercase\n*\t`titlecase(str)` - converts a string to Title Case\n*\t`camelcase(str, lowercase)` - converts a string to camelCase\n\t*\tThe `lowercase` argument causes the first letter to be lowercase, and\n\t\tdefault to `true`.\n*\t`decodeHTMLEntities(str)` - decodes html entities in a string\n*\t`encodeHTMLEntities(str)` - encodes html entities in a string\n*\t`stringify(obj)` - safely stringifies an object to JSON for output in JavaScript source (escapes illegal JS but valid JSON unicode characters)\n*\t`textToHTML(str)` - lightweight conversion of text to HTML (line breaks to `<br>`)\n*\t`htmlToText(str)` - lightweight conversion to HTML to text\n\t*\tReally only useful when you need a lightweight way to remove html from a\n\t\tstring before cropping it, so you don't end up with partial tags or an\n\t\tinvalid DOM structure.\n\t*\tIt will convert `br`, `p`, `div`, `li`, `td`, `th` tags to single\n\t\tline-breaks. All other tags are stripped.\n\t*\tMultiple line breaks are then compressed to a single line break, and\n\t\tleading / trailing white space is stripped.\n\t*\tFor a more sophisticated use-case, you should check out the `to-markdown`\n\t\tand `html-to-text` packages on npm.\n*\t`cropString(str, length, append, preserveWords)` - crops a string to the\n\tspecified length\n\t*\tYou can optionally provide a string to `append` (only appended if the\n\t\toriginal string was longer than the specified length).\n\t*\tIf `preserveWords` is true, the length is extended to the end of the last\n\t\tword that would have been cropped.\n*\t`cropHTMLString(str, length, append, preserveWords)` - crops an HTML string\n\tsafely by converting it to text, cropping it, then converting it back to HTML\n*\t`slug(str, separator)` - generates a slug from a string. Word breaks are hyphenated.\n\t*\t`separator` defaults to '-'\n*\t`keyToLabel(str)` - converts a key to a label\n\t*\te.g. `keyToLabel('myKey')` &raquo; `My Key`\n*\t`keyToPath(str, plural)` - converts a key to a path\n\t*\tLike `slug(keyToLabel(str))` but will optionally converts the last word\n\t\tto a plural.\n\t*\te.g. `keyToPath('someThing', true)` &raquo; `some-things`\n*\t`keyToProperty(str, plural)` - Converts a key to a property.\n\t*\tLike `keyToPath` but converts to headlessCamelCase instead of dash-separated\n*\t`calculateDistance(point1 [lat, lng], point2 [lat, lng])` - Returns the distance between two `[lat,lng]` points in radians\n*\t`kmBetween` - Returns the distance between two `[lat,lng]` points in kilometers\n*\t`milesBetween` - Returns the distance between two `[lat,lng]` points in miles\n\n\n\nCredits\n=======\n\nUses the inflect library for singular / plural conversion,\nsee https://github.com/pksunkara/inflect or `npm info i`\n\nSome utils are borrowed from / inspired by `mongoose/utils.js`,\nsee https://github.com/LearnBoost/mongoose\n\nHTML Entity encode / decode is based on code in `node-html-to-text`,\nsee https://github.com/werk85/node-html-to-text\n\nThe transliteration code is based on https://www.npmjs.org/package/transliteration.cyr\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/JedWatson/keystone-utils.git"
  },
  "scripts": {
    "lint": "happiness",
    "test": "mocha ./tests -R spec"
  },
  "version": "0.4.0"
}

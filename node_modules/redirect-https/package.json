{
  "_args": [
    [
      {
        "raw": "redirect-https@^1.1.0",
        "scope": null,
        "escapedName": "redirect-https",
        "name": "redirect-https",
        "rawSpec": "^1.1.0",
        "spec": ">=1.1.0 <2.0.0",
        "type": "range"
      },
      "/home/connextcms/test/node_modules/letsencrypt-express"
    ]
  ],
  "_from": "redirect-https@>=1.1.0 <2.0.0",
  "_id": "redirect-https@1.1.1",
  "_inCache": true,
  "_location": "/redirect-https",
  "_nodeVersion": "6.7.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/redirect-https-1.1.1.tgz_1479768622068_0.7851335420273244"
  },
  "_npmUser": {
    "name": "coolaj86",
    "email": "coolaj86@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "redirect-https@^1.1.0",
    "scope": null,
    "escapedName": "redirect-https",
    "name": "redirect-https",
    "rawSpec": "^1.1.0",
    "spec": ">=1.1.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/letsencrypt-express"
  ],
  "_resolved": "https://registry.npmjs.org/redirect-https/-/redirect-https-1.1.1.tgz",
  "_shasum": "5cb28f8c7428b9594cf20d8eda468041f72c90f3",
  "_shrinkwrap": null,
  "_spec": "redirect-https@^1.1.0",
  "_where": "/home/connextcms/test/node_modules/letsencrypt-express",
  "author": {
    "name": "AJ ONeal",
    "email": "coolaj86@gmail.com",
    "url": "http://coolaj86.com/"
  },
  "bugs": {
    "url": "https://github.com/Daplie/node-redirect-https/issues"
  },
  "dependencies": {
    "escape-html": "^1.0.2"
  },
  "description": "Redirect from HTTP to HTTPS using meta redirects",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "5cb28f8c7428b9594cf20d8eda468041f72c90f3",
    "tarball": "https://registry.npmjs.org/redirect-https/-/redirect-https-1.1.1.tgz"
  },
  "gitHead": "316d3c864e5ac6719a59ea7098491a73cd708954",
  "homepage": "https://github.com/Daplie/node-redirect-https#readme",
  "keywords": [
    "https",
    "http",
    "redirect",
    "force",
    "upgrade",
    "location",
    "meta"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "coolaj86",
      "email": "coolaj86@gmail.com"
    }
  ],
  "name": "redirect-https",
  "optionalDependencies": {},
  "readme": "# redirect-https\n\nRedirect from HTTP to HTTPS using meta redirects\n\nSee <https://coolaj86.com/articles/secure-your-redirects/>\n\n## Installation and Usage\n\n```bash\nnpm install --save redirect-https\n```\n\n```js\n'use strict';\n\nvar express = require('express');\nvar app = express();\n\napp.use('/', require('redirect-https')({\n  body: '<!-- Hello Mr Developer! Please use HTTPS instead -->'\n}));\n\nmodule.exports = app;\n```\n\n## Options\n\n```\n{ port: 443           // defaults to 443\n, body: ''            // defaults to an html comment to use https\n, trustProxy: true    // useful if you haven't set this option in express\n}\n```\n\n* This module will call `next()` if the connection is already tls / https.\n* If `trustProxy` is true, and `X-Forward-Proto` is https, `next()` will be called.\n* If you use `{{URL}}` in the body text it will be replaced with a URI encoded and HTML escaped url (it'll look just like it is)\n* If you use `{{HTML_URL}}` in the body text it will be replaced with a URI decoded and HTML escaped url (it'll look just like it would in Chrome's URL bar)\n\n## Demo\n\n```javascript\n'use strict';\n\nvar http = require('http');\nvar server = http.createServer();\nvar securePort = process.argv[2] || 8443;\nvar insecurePort = process.argv[3] || 8080;\n\nserver.on('request', require('redirect-https')({\n  port: securePort\n, body: '<!-- Hello! Please use HTTPS instead -->'\n, trustProxy: true // default is false\n}));\n\nserver.listen(insecurePort, function () {\n  console.log('Listening on http://localhost.daplie.com:' + server.address().port);\n});\n```\n\n# Why meta redirects?\n\nWhen something is broken (i.e. insecure), you don't want it to kinda work, you want developers to notice.\n\nUsing a meta redirect will break requests from `curl` and api calls from a programming language, but still have all the SEO and speed benefits of a normal `301`.\n\n```html\n<html><head>\n<meta http-equiv=\"refresh\" content=\"0;URL='https://example.com/foo'\" />\n</head><body>\n<!-- Hello Mr. Developer! Please use https instead. Thank you! -->\n</html>\n```\n\n# Other strategies\n\nIf your application is properly separated between static assets and api, then it would probably be more beneficial to return a 200 OK with an error message inside\n\n# Security\n\nThe incoming URL is already URI encoded by the browser but, just in case, I run an html escape on it\nso that no malicious links of this sort will yield unexpected behavior:\n\n  * `http://localhost.daplie.com:8080/\"><script>alert('hi')</script>`\n  * `http://localhost.daplie.com:8080/';URL=http://example.com`\n  * `http://localhost.daplie.com:8080/;URL=http://example.com`\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Daplie/node-redirect-https.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.1.1"
}

{
  "_args": [
    [
      {
        "raw": "react-select@1.0.0-rc.1",
        "scope": null,
        "escapedName": "react-select",
        "name": "react-select",
        "rawSpec": "1.0.0-rc.1",
        "spec": "1.0.0-rc.1",
        "type": "version"
      },
      "/home/connextcms/test/node_modules/keystone"
    ]
  ],
  "_from": "react-select@1.0.0-rc.1",
  "_id": "react-select@1.0.0-rc.1",
  "_inCache": true,
  "_location": "/react-select",
  "_nodeVersion": "6.3.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/react-select-1.0.0-rc.1.tgz_1472995131173_0.7726019804831594"
  },
  "_npmUser": {
    "name": "jedwatson",
    "email": "jed.watson@me.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-select@1.0.0-rc.1",
    "scope": null,
    "escapedName": "react-select",
    "name": "react-select",
    "rawSpec": "1.0.0-rc.1",
    "spec": "1.0.0-rc.1",
    "type": "version"
  },
  "_requiredBy": [
    "/keystone"
  ],
  "_resolved": "https://registry.npmjs.org/react-select/-/react-select-1.0.0-rc.1.tgz",
  "_shasum": "56d0c8db0ce7b822f3f8ababe3fb491ff8e9c7cf",
  "_shrinkwrap": null,
  "_spec": "react-select@1.0.0-rc.1",
  "_where": "/home/connextcms/test/node_modules/keystone",
  "author": {
    "name": "Jed Watson"
  },
  "browserify-shim": {
    "classnames": "global:classNames",
    "react": "global:React",
    "react-dom": "global:ReactDOM",
    "react-input-autosize": "global:AutosizeInput"
  },
  "bugs": {
    "url": "https://github.com/JedWatson/react-select/issues"
  },
  "dependencies": {
    "classnames": "^2.2.4",
    "react-input-autosize": "^1.1.0"
  },
  "description": "A Select control built with and for ReactJS",
  "devDependencies": {
    "babel": "^5.8.23",
    "babel-eslint": "^4.1.3",
    "chai": "^3.5.0",
    "coveralls": "^2.11.12",
    "eslint": "^1.10.3",
    "eslint-plugin-react": "^3.15.0",
    "gulp": "^3.9.1",
    "isomorphic-fetch": "^2.2.1",
    "istanbul": "^0.4.5",
    "jsdom": "^9.4.2",
    "mocha": "^3.0.2",
    "react": "^15.0",
    "react-addons-shallow-compare": "^15.0",
    "react-addons-test-utils": "^15.0",
    "react-component-gulp-tasks": "^0.7.7",
    "react-dom": "^15.0",
    "react-gravatar": "^2.4.5",
    "react-virtualized": "^7.22.1",
    "react-virtualized-select": "^1.3.0",
    "sinon": "^1.17.5",
    "unexpected": "^10.16.0",
    "unexpected-dom": "^3.1.0",
    "unexpected-react": "^3.2.3",
    "unexpected-sinon": "^10.4.0"
  },
  "directories": {},
  "dist": {
    "shasum": "56d0c8db0ce7b822f3f8ababe3fb491ff8e9c7cf",
    "tarball": "https://registry.npmjs.org/react-select/-/react-select-1.0.0-rc.1.tgz"
  },
  "gitHead": "3e4ebfcd12bb193b156e58514805087975647f38",
  "homepage": "https://github.com/JedWatson/react-select#readme",
  "keywords": [
    "combobox",
    "form",
    "input",
    "multiselect",
    "react",
    "react-component",
    "select",
    "ui"
  ],
  "license": "MIT",
  "main": "lib/Select.js",
  "maintainers": [
    {
      "name": "jedwatson",
      "email": "jed.watson@me.com"
    }
  ],
  "name": "react-select",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14 || ^15.0.0-rc || ^15.0",
    "react-dom": "^0.14 || ^15.0.0-rc || ^15.0"
  },
  "readme": "[![NPM](https://img.shields.io/npm/v/react-select.svg)](https://www.npmjs.com/package/react-select)\n[![Build Status](https://travis-ci.org/JedWatson/react-select.svg?branch=master)](https://travis-ci.org/JedWatson/react-select)\n[![Coverage Status](https://coveralls.io/repos/JedWatson/react-select/badge.svg?branch=master&service=github)](https://coveralls.io/github/JedWatson/react-select?branch=master)\n[![Supported by Thinkmill](https://thinkmill.github.io/badge/heart.svg)](http://thinkmill.com.au/?utm_source=github&utm_medium=badge&utm_campaign=react-select)\n\nReact-Select\n============\n\nA Select control built with and for [React](http://facebook.github.io/react/index.html). Initially built for use in [KeystoneJS](http://www.keystonejs.com).\n\n\n## New version 1.0.0-rc\n\nI've nearly completed a major rewrite of this component (see issue [#568](https://github.com/JedWatson/react-select/issues/568) for details and progress). The new code has been merged into `master`, and `react-select@1.0.0-rc` has been published to npm and bower.\n\n1.0.0 has some breaking changes. The documentation is still being updated for the new API; notes on the changes can be found in [CHANGES.md](https://github.com/JedWatson/react-select/blob/master/CHANGES.md) and will be finalised into [HISTORY.md](https://github.com/JedWatson/react-select/blob/master/HISTORY.md) soon.\n\nTesting, feedback and PRs for the new version are appreciated.\n\n\n## Demo & Examples\n\nLive demo: [jedwatson.github.io/react-select](http://jedwatson.github.io/react-select/)\n\nThe live demo is still running `v0.9.1`.\n\nTo build the **new 1.0.0** examples locally, clone this repo then run:\n\n```javascript\nnpm install\nnpm start\n```\n\nThen open [`localhost:8000`](http://localhost:8000) in a browser.\n\n\n## Installation\n\nThe easiest way to use React-Select is to install it from NPM and include it in your own React build process (using [Browserify](http://browserify.org), etc).\n\n```javascript\nnpm install react-select --save\n```\n\nAt this point you can import react-select and its styles in your application as follows:\n\n```js\nimport Select from 'react-select';\n\n// Be sure to include styles at some point, probably during your bootstrapping\nimport 'react-select/dist/react-select.css';\n```\n\nYou can also use the standalone build by including `react-select.js` and `react-select.css` in your page. (If you do this though you'll also need to include the dependencies.) For example:\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react-dom.min.js\"></script>\n<script src=\"https://unpkg.com/classnames/index.js\"></script>\n<script src=\"https://unpkg.com/react-input-autosize/dist/react-input-autosize.js\"></script>\n<script src=\"https://unpkg.com/react-select/dist/react-select.js\"></script>\n\n<link rel=\"stylesheet\" href=\"https://unpkg.com/react-select/dist/react-select.css\">\n```\n\n\n## Usage\n\nReact-Select generates a hidden text field containing the selected value, so you can submit it as part of a standard form. You can also listen for changes with the `onChange` event property.\n\nOptions should be provided as an `Array` of `Object`s, each with a `value` and `label` property for rendering and searching. You can use a `disabled` property to indicate whether the option is disabled or not.\n\nThe `value` property of each option should be set to either a string or a number.\n\nWhen the value is changed, `onChange(selectedValueOrValues)` will fire.\n\n```javascript\nvar Select = require('react-select');\n\nvar options = [\n\t{ value: 'one', label: 'One' },\n\t{ value: 'two', label: 'Two' }\n];\n\nfunction logChange(val) {\n\tconsole.log(\"Selected: \" + val);\n}\n\n<Select\n\tname=\"form-field-name\"\n\tvalue=\"one\"\n\toptions={options}\n\tonChange={logChange}\n/>\n```\n\n### Multiselect options\n\nYou can enable multi-value selection by setting `multi={true}`. In this mode:\n\n* Selected options will be removed from the dropdown menu\n* The selected values are submitted in multiple `<input type=\"hidden\">` fields, use `joinValues` to submit joined values in a single field instead\n* The values of the selected items are joined using the `delimiter` prop to create the input value when `joinValues` is true\n* A simple value, if provided, will be split using the `delimiter` prop\n* The `onChange` event provides an array of selected options _or_ a comma-separated string of values (eg `\"1,2,3\"`) if `simpleValue` is true\n* By default, only options in the `options` array can be selected. Setting `allowCreate` to true allows new options to be created if they do not already exist. *NOTE:* `allowCreate` is not implemented in `1.0.0-beta`, if you need this option please stay on `0.9.x`.\n* By default, selected options can be cleared. To disable the possibility of clearing a particular option, add `clearableValue: false` to that option:\n```javascript\nvar options = [\n\t{ value: 'one', label: 'One' },\n\t{ value: 'two', label: 'Two', clearableValue: false }\n];\n```\nNote: the `clearable` prop of the Select component should also be set to `false` to prevent allowing clearing all fields at once\n\n### Async options\n\nIf you want to load options asynchronously, instead of providing an `options` Array, provide a `loadOptions` Function.\n\nThe function takes two arguments `String input, Function callback`and will be called when the input text is changed.\n\nWhen your async process finishes getting the options, pass them to `callback(err, data)` in a Object `{ options: [] }`.\n\nThe select control will intelligently cache options for input strings that have already been fetched. The cached result set will be filtered as more specific searches are input, so if your async process would only return a smaller set of results for a more specific query, also pass `complete: true` in the callback object. Caching can be disabled by setting `cache` to `false` (Note that `complete: true` will then have no effect).\n\nUnless you specify the property `autoload={false}` the control will automatically load the default set of options (i.e. for `input: ''`) when it is mounted.\n\n```javascript\nvar Select = require('react-select');\n\nvar getOptions = function(input, callback) {\n\tsetTimeout(function() {\n\t\tcallback(null, {\n\t\t\toptions: [\n\t\t\t\t{ value: 'one', label: 'One' },\n\t\t\t\t{ value: 'two', label: 'Two' }\n\t\t\t],\n\t\t\t// CAREFUL! Only set this to true when there are no more options,\n\t\t\t// or more specific queries will not be sent to the server.\n\t\t\tcomplete: true\n\t\t});\n\t}, 500);\n};\n\n<Select.Async\n    name=\"form-field-name\"\n    loadOptions={getOptions}\n/>\n```\n\n### Async options with Promises\n\n`loadOptions` supports Promises, which can be used in very much the same way as callbacks.\n\nEverything that applies to `loadOptions` with callbacks still applies to the Promises approach (e.g. caching, autoload, ...)\n\nAn example using the `fetch` API and ES6 syntax, with an API that returns an object like:\n\n```javascript\nimport Select from 'react-select';\n\n/*\n * assuming the API returns something like this:\n *   const json = [\n * \t   { value: 'one', label: 'One' },\n * \t   { value: 'two', label: 'Two' }\n *   ]\n */\n\nconst getOptions = (input) => {\n  return fetch(`/users/${input}.json`)\n    .then((response) => {\n      return response.json();\n    }).then((json) => {\n      return { options: json };\n    });\n}\n\n<Select.Async\n\tname=\"form-field-name\"\n\tvalue=\"one\"\n\tloadOptions={getOptions}\n/>\n```\n\n### Async options loaded externally\n\nIf you want to load options asynchronously externally from the `Select` component, you can have the `Select` component show a loading spinner by passing in the `isLoading` prop set to `true`.\n\n```javascript\nvar Select = require('react-select');\n\nvar isLoadingExternally = true;\n\n<Select\n  name=\"form-field-name\"\n\tisLoading={isLoadingExternally}\n\t...\n/>\n```\n\n### User-created tags\n\nThe `Creatable` component enables users to create new tags within react-select.\nIt decorates a `Select` and so it supports all of the default properties (eg single/multi mode, filtering, etc) in addition to a couple of custom ones (shown below).\nThe easiest way to use it is like so:\n\n```js\nimport { Creatable } from 'react-select';\n\nfunction render (selectProps) {\n  return <Creatable {...selectProps} />;\n};\n```\n\n##### Creatable properties\n\nProperty | Type | Description\n:---|:---|:---\n`isOptionUnique` | function | Searches for any matching option within the set of options. This function prevents duplicate options from being created. By default this is a basic, case-sensitive comparison of label and value. Expected signature: `({ option: Object, options: Array, labelKey: string, valueKey: string }): boolean` |\n`isValidNewOption` | function | Determines if the current input text represents a valid option. By default any non-empty string will be considered valid. Expected signature: `({ label: string }): boolean` |\n`newOptionCreator` | function | Factory to create new option. Expected signature: `({ label: string, labelKey: string, valueKey: string }): Object` |\n`shouldKeyDownEventCreateNewOption` | function | Decides if a keyDown event (eg its `keyCode`) should result in the creation of a new option. ENTER, TAB and comma keys create new options by dfeault. Expected signature: `({ keyCode: number }): boolean` |\n\n### Filtering options\n\nYou can control how options are filtered with the following properties:\n\n* `matchPos`: `\"start\"` or `\"any\"`: whether to match the text entered at the start or any position in the option value\n* `matchProp`: `\"label\"`, `\"value\"` or `\"any\"`: whether to match the value, label or both values of each option when filtering\n* `ignoreCase`: `Boolean`: whether to ignore case or match the text exactly when filtering\n\n`matchProp` and `matchPos` both default to `\"any\"`.\n`ignoreCase` defaults to `true`.\n\n#### Advanced filters\n\nYou can also completely replace the method used to filter either a single option, or the entire options array (allowing custom sort mechanisms, etc.)\n\n* `filterOption`: `function(Object option, String filter)` returns `Boolean`. Will override `matchPos`, `matchProp` and `ignoreCase` options.\n* `filterOptions`: `function(Array options, String filter, Array currentValues)` returns `Array filteredOptions`. Will override `filterOption`, `matchPos`, `matchProp` and `ignoreCase` options.\n\nFor multi-select inputs, when providing a custom `filterOptions` method, remember to exclude current values from the returned array of options.\n\n#### Filtering large lists\n\nThe default `filterOptions` method scans the options array for matches each time the filter text changes.\nThis works well but can get slow as the options array grows to several hundred objects.\nFor larger options lists a custom filter function like [`react-select-fast-filter-options`](https://github.com/bvaughn/react-select-fast-filter-options) will produce better results.\n\n### Effeciently rendering large lists with windowing\n\nThe `menuRenderer` property can be used to override the default drop-down list of options.\nThis should be done when the list is large (hundreds or thousands of items) for faster rendering.\nWindowing libraries like [`react-virtualized`](https://github.com/bvaughn/react-virtualized) can then be used to more efficiently render the drop-down menu like so.\nThe easiest way to do this is with the [`react-virtualized-select`](https://github.com/bvaughn/react-virtualized-select/) HOC.\nThis component decorates a `Select` and uses the react-virtualized `VirtualScroll` component to render options.\nDemo and documentation for this component are available [here](https://bvaughn.github.io/react-virtualized-select/).\n\nYou can also specify your own custom renderer.\nThe custom `menuRenderer` property accepts the following named parameters:\n\n| Parameter | Type | Description |\n|:---|:---|:---|\n| focusedOption | `Object` | The currently focused option; should be visible in the menu by default. |\n| focusOption | `Function` | Callback to focus a new option; receives the option as a parameter. |\n| labelKey | `String` | Option labels are accessible with this string key. |\n| options | `Array<Object>` | Ordered array of options to render. |\n| selectValue | `Function` | Callback to select a new option; receives the option as a parameter. |\n| valueArray | `Array<Object>` | Array of currently selected options. |\n\n### Updating input values with onInputChange\n\nYou can manipulate the input using the onInputChange and returning a new value.\n\n```js\nfunction cleanInput(inputValue) {\n\t  // Strip all non-number characters from the input\n    return inputValue.replace(/[^0-9]/g, \"\");\n}   \n\n<Select\n    name=\"form-field-name\"\n    onInputChange={cleanInput}\n/>\n```\n\n### Overriding default key-down behavior with onInputKeyDown\n\n`Select` listens to `keyDown` events to select items, navigate drop-down list via arrow keys, etc.\nYou can extend or override this behavior by providing a `onInputKeyDown` callback.\n\n```js\nfunction onInputKeyDown(event) {\n\tswitch (event.keyCode) {\n\t\tcase 9:   // TAB\n\t\t\t// Extend default TAB behavior by doing something here\n\t\t\tbreak;\n\t\tcase 13: // ENTER\n\t\t\t// Override default ENTER behavior by doing stuff here and then preventing default\n\t\t\tevent.preventDefault();\n\t\t\tbreak;\n\t}\n}\n\n<Select\n\t{...otherProps}\n\tonInputKeyDown={onInputKeyDown}\n/>\n```\n\n### Further options\n\n\n\tProperty\t|\tType\t\t|\tDefault\t\t|\tDescription\n:-----------------------|:--------------|:--------------|:--------------------------------\n\taddLabelText\t|\tstring\t|\t'Add \"{label}\"?'\t|\ttext to display when `allowCreate` is true\n\tautoBlur\t|\tbool | false | Blurs the input element after a selection has been made. Handy for lowering the keyboard on mobile devices\n\tautofocus       |       bool    |      undefined        |  autofocus the component on mount\n\tautoload \t|\tbool\t|\ttrue\t\t|\twhether to auto-load the default async options set\n\tautosize  | bool | true  | If enabled, the input will expand as the length of its value increases\n\tbackspaceRemoves \t|\tbool\t|\ttrue\t|\twhether pressing backspace removes the last item when there is no input value\n\tcache\t|\tbool\t|\ttrue\t|\tenables the options cache for `asyncOptions` (default: `true`)\n\tclassName \t|\tstring\t|\tundefined\t|\tclassName for the outer element\n\tclearable \t|\tbool\t|\ttrue\t\t|\tshould it be possible to reset value\n\tclearAllText \t|\tstring\t|\t'Clear all'\t|\ttitle for the \"clear\" control when `multi` is true\n\tclearValueText \t|\tstring\t|\t'Clear value'\t|\ttitle for the \"clear\" control\n\tresetValue \t|\tany\t|\tnull\t|\tvalue to use when you clear the control\n\tdelimiter \t|\tstring\t|\t','\t\t|\tdelimiter to use to join multiple values\n\tdisabled \t|\tbool\t|\tfalse\t\t|\twhether the Select is disabled or not\n\tfilterOption \t|\tfunc\t|\tundefined\t|\tmethod to filter a single option: `function(option, filterString)`\n\tfilterOptions \t|\tfunc\t|\tundefined\t|\tmethod to filter the options array: `function([options], filterString, [values])`\n\tignoreCase \t|\tbool\t|\ttrue\t\t|\twhether to perform case-insensitive filtering\n\tinputProps \t|\tobject\t|\t{}\t\t|\tcustom attributes for the Input (in the Select-control) e.g: `{'data-foo': 'bar'}`\n\tisLoading\t|\tbool\t|\tfalse\t\t|\twhether the Select is loading externally or not (such as options being loaded)\n\tjoinValues\t|\tbool\t|\tfalse\t\t|\tjoin multiple values into a single hidden input using the `delimiter`\n\tlabelKey\t|\tstring\t|\t'label'\t\t|\tthe option property to use for the label\n\tloadOptions\t|\tfunc\t|\tundefined\t|\tfunction that returns a promise or calls a callback with the options: `function(input, [callback])`\n\tmatchPos \t|\tstring\t|\t'any'\t\t|\t(any, start) match the start or entire string when filtering\n\tmatchProp \t|\tstring\t|\t'any'\t\t|\t(any, label, value) which option property to filter on\n\tmenuBuffer\t|\tnumber\t|\t0\t\t|\tbuffer of px between the base of the dropdown and the viewport to shift if menu doesnt fit in viewport\n\tmenuRenderer | func | undefined | Renders a custom menu with options; accepts the following named parameters: `menuRenderer({ focusedOption, focusOption, options, selectValue, valueArray })`\n\tmulti \t\t|\tbool\t|\tundefined\t|\tmulti-value input\n\tname \t\t|\tstring\t|\tundefined\t|\tfield name, for hidden `<input />` tag\n\tnoResultsText \t|\tstring\t|\t'No results found'\t|\tplaceholder displayed when there are no matching search results or a falsy value to hide it\n\tonBlur \t\t|\tfunc\t|\tundefined\t|\tonBlur handler: `function(event) {}`\n\tonBlurResetsInput\t|\tbool\t|\ttrue\t|\twhether to clear input on blur or not\n\tonChange \t|\tfunc\t|\tundefined\t|\tonChange handler: `function(newValue) {}`\n\tonClose\t\t|\tfunc\t|\tundefined\t|\thandler for when the menu closes: `function () {}`\n\tonCloseResetInput | bool  | true  | whether to clear input when closing the menu through the arrow\n\tonFocus \t|\tfunc\t|\tundefined\t|\tonFocus handler: `function(event) {}`\n\tonInputChange\t|\tfunc\t|\tundefined\t|\tonInputChange handler: `function(inputValue) {}`\n\tonInputKeyDown\t|\tfunc\t|\tundefined\t|\tinput keyDown handler; call `event.preventDefault()` to override default `Select` behavior: `function(event) {}`\n\tonOpen\t\t|\tfunc\t|\tundefined\t|\thandler for when the menu opens: `function () {}`\n\tonValueClick\t|\tfunc\t|\tundefined\t|\tonClick handler for value labels: `function (value, event) {}`\n\topenOnFocus | bool | false | open the options menu when the input gets focus (requires searchable = true)\n\toptionRenderer\t|\tfunc\t|\tundefined\t|\tfunction which returns a custom way to render the options in the menu\n\toptions \t|\tarray\t|\tundefined\t|\tarray of options\n\tplaceholder \t|\tstring\\|node\t|\t'Select ...'\t|\tfield placeholder, displayed when there's no value\n\tscrollMenuIntoView |\tbool\t|\ttrue\t\t|\twhether the viewport will shift to display the entire menu when engaged\n\tsearchable \t|\tbool\t|\ttrue\t\t|\twhether to enable searching feature or not\n\tsearchingText\t|\tstring\t|\t'Searching...'\t|\tmessage to display whilst options are loading via asyncOptions, or when `isLoading` is true\n\tsearchPromptText |\tstring\\|node\t|\t'Type to search'\t|\tlabel to prompt for search input\n\ttabSelectsValue\t|\tbool\t|\ttrue\t|\twhether to select the currently focused value when the `[tab]` key is pressed\n\tvalue \t\t|\tany\t|\tundefined\t|\tinitial field value\n\tvalueKey\t|\tstring\t|\t'value'\t\t|\tthe option property to use for the value\n\tvalueRenderer\t|\tfunc\t|\tundefined\t|\tfunction which returns a custom way to render the value selected `function (option) {}`\n\n### Methods\n\nRight now there's simply a `focus()` method that gives the control focus. All other methods on `<Select>` elements should be considered private and prone to change.\n\n```javascript\n// focuses the input element\n<instance>.focus();\n```\n\n# Contributing\n\nSee our [CONTRIBUTING.md](https://github.com/JedWatson/react-select/blob/master/CONTRIBUTING.md) for information on how to contribute.\n\nThanks to the projects this was inspired by: [Selectize](http://brianreavis.github.io/selectize.js/) (in terms of behaviour and user experience), [React-Autocomplete](https://github.com/rackt/react-autocomplete) (as a quality React Combobox implementation), as well as other select controls including [Chosen](http://harvesthq.github.io/chosen/) and [Select2](http://ivaynberg.github.io/select2/).\n\n\n# License\n\nMIT Licensed. Copyright (c) Jed Watson 2016.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/JedWatson/react-select.git"
  },
  "scripts": {
    "build": "gulp clean && NODE_ENV=production gulp build",
    "bump": "gulp bump",
    "bump:major": "gulp bump:major",
    "bump:minor": "gulp bump:minor",
    "cover": "istanbul cover _mocha -- -u exports --compilers js:babel/register -R spec",
    "coveralls": "NODE_ENV=test istanbul cover _mocha --report lcovonly -- -u exports --compilers js:babel/register -R spec && cat coverage/lcov.info | coveralls",
    "examples": "gulp dev:server",
    "lint": "eslint .",
    "publish:examples": "NODE_ENV=production gulp publish:examples",
    "release": "NODE_ENV=production gulp release",
    "start": "gulp dev",
    "test": "npm run lint && mocha --compilers js:babel/register",
    "watch": "gulp watch:lib"
  },
  "style": "dist/react-select.min.css",
  "version": "1.0.0-rc.1"
}
